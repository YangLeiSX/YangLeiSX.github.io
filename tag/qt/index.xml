<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Qt | YangLeiSX</title>
    <link>https://yangleisx.github.io/tag/qt/</link>
      <atom:link href="https://yangleisx.github.io/tag/qt/index.xml" rel="self" type="application/rss+xml" />
    <description>Qt</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Tue, 21 Apr 2020 09:26:44 +0800</lastBuildDate>
    <image>
      <url>https://yangleisx.github.io/media/icon_hu9d67daea6e408fd17d2331b8d809e90a_61652_512x512_fill_lanczos_center_3.png</url>
      <title>Qt</title>
      <link>https://yangleisx.github.io/tag/qt/</link>
    </image>
    
    <item>
      <title>Qt开发OpenSSL程序踩坑</title>
      <link>https://yangleisx.github.io/post/log-qt-ssl/</link>
      <pubDate>Tue, 21 Apr 2020 09:26:44 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/log-qt-ssl/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;分别由两个人开发的代码需要被整合进入一个完整的项目并运行。&lt;/p&gt;
&lt;p&gt;其中第一位同学使用Visual Studio开发基于C++和openSSL的加解密的程序，使用vcpkg安装和编译openSSL:x86-windows并且集成到Visual Studio中。另一位同学使用Qt Creator开发基于C++和Qt的GUI程序。&lt;/p&gt;
&lt;h2 id=&#34;ide选择&#34;&gt;IDE选择&lt;/h2&gt;
&lt;p&gt;由于需要将两份代码合成一个完整的项目运行，我首先选择IDE为Visual Studio，但是由于并没有在VS中写过Qt程序，添加的QT VS TOOL插件总是无法正常编译。因此放弃使用Visual Studio作为项目IDE。选择Qt Creator作为开发环境。&lt;/p&gt;
&lt;h2 id=&#34;编译&#34;&gt;编译&lt;/h2&gt;
&lt;p&gt;遇到的第一个问题是将openSSL集成到Qt Creator，从网上找到的资料都是从OpenSSL官网下载，并在Qt项目文件中添加库和头文件路径。如下代码所示&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LIBS += \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -Lpath/lib -lssl \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -Lpath/lib -lcrypto
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INCLUDEPATH += path/include
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我遇到的问题是，添加头文件正常，但是在编译的时候会出现&lt;code&gt;undefined reference to xxx&lt;/code&gt;的报错，仔细一看是openssl库中的函数，在代码中&lt;code&gt;follow symbols&lt;/code&gt;可以跳转到头文件中对应的定义，因此猜测是头文件正常但库文件没有正常加载。&lt;/p&gt;
&lt;p&gt;这里涉及到的我尝试过的库文件包括&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libssl.lib
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libcrypto.lib
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libssl.a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libcrypto.a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libssl.dll.a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libcrypto.dll.a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libssl-1_1.dll
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libcrypto-1_1.dll
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;libeay32.dll
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ssleay32.dll
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;于是开始各种下载和添加库文件。包括但不限于&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用vcpkg编译x64-windows版本的openssl库并添加（考虑到32位和64位可能产生的冲突）&lt;/li&gt;
&lt;li&gt;官网下载openssl安装包（由于下载速度太慢，我选择了64位light版本的安装包，但是light版本安装包没有lib文件，完整版本的安装包就不曾下载成功过）&lt;/li&gt;
&lt;li&gt;将lib和include文件copy到项目目录下，再使用上述方法添加路径。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在这个时候，我查到一篇文章说qt本身是包括openssl的但是在编译的时候默认不安装，因此qt的环境下实际上是包括openssl对应的库文件和头文件的。经过一番查找我找到这个路径&lt;code&gt;C:\Qt\Qt5.12.0\Tools\mingw730_64\opt&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;这个路径的lib目录下包括了libssl.a、libcrypto.a、libssl.dll.a、libcrypto.dll.a，bin目录下包括libeay32.dll、ssleay32.dll，include目录下包括openssl头文件目录。因此我修改.pro文件如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-txt&#34; data-lang=&#34;txt&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;# 这里的$$quote我也没搞清啥意思，大概是双引号
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;LIBS += \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -LC:\Qt\Qt5.12.0\Tools\mingw730_64\opt\lib -lssl \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -LC:\Qt\Qt5.12.0\Tools\mingw730_64\opt\lib -lcrypto
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;INCLUDEPATH += \
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    $$quote(C:\Qt\Qt5.12.0\Tools\mingw730_64\opt\include)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;经过多次编译，并注释掉一些无用的函数，终于实现了&lt;code&gt;0 warnigns, 0 errors&lt;/code&gt;，呜呼。&lt;/p&gt;
&lt;h2 id=&#34;运行&#34;&gt;运行&lt;/h2&gt;
&lt;p&gt;接下来遇到的问题是，程序无法运行。在Qt Creator中直接运行，程序闪退并显示&lt;code&gt;程序异常结束&lt;/code&gt;。在Qt Creator中开启Debugger，同样也是闪退，添加的断点直接被无视了。&lt;/p&gt;
&lt;p&gt;刚开始考虑到可能是被杀毒软件杀掉了，因此经过一番操作关闭了Windows Defender，但是仍然无法运行，陷入停滞。&lt;/p&gt;
&lt;p&gt;这个时候查到一篇文章，详细介绍了Qt Creator中的闪退的原因并给出了一个检查的方法，就是找到编译生成的exe文件，直接双击运行。程序自然无法运行并提示缺少许多dll文件，其中包括qt的依赖库例如QtCore.dll等等，因此使用windeployqt.exe(位于&lt;code&gt;C:\Qt\Qt5.12.0\5.12.0\mingw73_64\bin&lt;/code&gt;)将Qt所有的依赖dll复制到exe对应的路径下，这个时候再次点击exe文件，显示&lt;code&gt;缺少libeay32.dll&lt;/code&gt;于是将上述的libeay32.dll和ssleay32.dll（位于&lt;code&gt;C:\Qt\Qt5.12.0\Tools\mingw730_64\opt\bin&lt;/code&gt;）复制到这个路径下。&lt;/p&gt;
&lt;p&gt;双击exe，正常运行！！！经过测试，一切正常。每次使用qt编译后，将得到的exe文件拷贝到一个新的路径下，调用windeployqt和复制dll就可以正常运行。&lt;/p&gt;
&lt;h2 id=&#34;总结反思&#34;&gt;总结反思&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;我使用Qt官网下载的安装包安装Qt时，IDE选择了QtCreator，编译环境我选择了MinGW和MSVC，因此在我的安装目录下（&lt;code&gt;C:\Qt\Qt5.12.0\5.12.0&lt;/code&gt;）包括了如下四个编译环境，每一个环境中都包含了windeployqt等一系列exe文件，和完整的Qt编译环境（bin + lib + include）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mingw73_64&lt;/p&gt;
&lt;p&gt;msvc2015_64&lt;/p&gt;
&lt;p&gt;msvc2017&lt;/p&gt;
&lt;p&gt;msvc2017_64&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是非常疑惑的一点是，在编译时我检查Qt Cretor的编译输出窗口，发现我编译使用的是Tools目录下的mingw730_64。进一步检查发现Tools目录下（&lt;code&gt;C:\Qt\Qt5.12.0\Tools&lt;/code&gt;）包括如下目录。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;mingw730_64&lt;/p&gt;
&lt;p&gt;QtCreator&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;前者不是一个完整的Qt编译环境，不包括qt的各种dll，而是包括了ar、ld、gcc、make、objdump等一系列工具，更像是一个编译环境。其opt目录下包括了openssl的编译环境（前文使用到的）。&lt;/p&gt;
&lt;p&gt;那么这两个不同的mingw环境究竟有什么区别呢？后者可不可以换成我之前自己手动安装的MinGW环境呢？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用vcpkg编译得到的环境和使用官方安装包以及从GitHub直接下载手动编译的环境有什么区别。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;对于库文件来说存不存在32位和64位的差异，如果不存在的话，那么vcpkg编译时为什么提供了x86-windows和x64-windows的不同的triplets（还包括了arm、linux等其他选择）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;函数静态库和动态库在使用时一定要同时存在么，即编译时指定lib文件，执行时exe文件路径中要包含对应的dll文件。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;vcpkg编译得到的libssl.lib和mingw730_64的opt路径下的libssl.a文件有什么差异，能不能简单通过改变后缀名来实现适配。同理还有.dll文件和.so文件之间的关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后的最后，还是感觉任重而道远。上述问题大多都是操作系统和C语言编译的基础知识，还是要努力打好基础。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>QT程序打包部署</title>
      <link>https://yangleisx.github.io/post/qt-deploy/</link>
      <pubDate>Thu, 16 Apr 2020 15:59:41 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/qt-deploy/</guid>
      <description>&lt;p&gt;使用qt编写的GUI程序部署和发布流程。&lt;/p&gt;
&lt;h2 id=&#34;pythonpyqt程序部署&#34;&gt;Python&amp;amp;PyQt程序部署&lt;/h2&gt;
&lt;p&gt;使用pyinstaller工具打包部署使用pyqt编写的GUI程序。（适用于Windows和macOS）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 使用pip安装pyinstaller工具&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pip install pyinstaller
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ pyinstaller -F -w --noconfirm --icon myicno.ico mainwindow.py
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 其中：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -F            表示打包为一个单独的exe文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# -w            表示exe文件运行时隐藏cmd窗口(黑框)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# --icon        表示指定图标&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# --noconfirm   表示覆盖原有文件时不询问&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结束后，在当前目录下会生成两个文件夹build和dist。前者存放编译生成的一些中间文件，后者为distribution的简称，存放打包结束的文件。&lt;/p&gt;
&lt;p&gt;使用-F生成的是单个exe文件，但是文件非常大。不添加-F选项得到的文件夹中包括程序主文件和大量依赖的dll文件。&lt;/p&gt;
&lt;p&gt;不添加-w选项时，上述生成的文件运行时会出现一个cmd窗口，显示程序中的qDebug()信息。因此在最后的发布版本中建议加上-w选项，并注释掉qDebug信息。&lt;/p&gt;
&lt;p&gt;当build和dist文件夹存在时，pyinstaller写入文件时会询问时候覆盖原有的文件，使用&amp;ndash;noconfirm表示直接覆盖，不询问用户。&lt;/p&gt;
&lt;h2 id=&#34;cqt程序部署&#34;&gt;C++&amp;amp;QT程序部署&lt;/h2&gt;
&lt;p&gt;使用QT自带的windeployqt.exe工具。通常位于QT的安装路径的/bin下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 将Qt Creator编译生成的release文件夹下的内容复制到一个新的文件夹&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 此时直接点击mainwindow.exe运行失败，因为缺少一些依赖的dll文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;$&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;windeployqt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;exe&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;mainwindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;py&#34;&gt;exe&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;运行结束后，这个文件夹下包含程序主文件和依赖的dll文件。&lt;/p&gt;
&lt;h2 id=&#34;程序发布&#34;&gt;程序发布&lt;/h2&gt;
&lt;p&gt;可以使用Inno Setup工具将上述部署得到的包含dll和exe的文件夹打包成一个安装包发布。&lt;/p&gt;
&lt;p&gt;可以填写程序名称、版本号、网址、LICENSE文件、README文件、安装包图标，并选择程序主exe文件、选择程序依赖文件夹，Inno Setup工具就会将所有需要的文件打包为一个setup.exe安装包。&lt;/p&gt;
&lt;p&gt;用户可以点击该安装包将文件安装到系统目录(例如C:\ProgramFiles)中并创建桌面和开始菜单图标。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>PyQt 工作环境搭建</title>
      <link>https://yangleisx.github.io/post/pyqt-env/</link>
      <pubDate>Sun, 15 Mar 2020 11:05:18 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/pyqt-env/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;
&lt;p&gt;之前使用过C++和QT开发具有GUI的小工具。考虑到人生苦短，决定转到使用PyQt，因此在mac上搭建PyQt工作环境。由于电脑上已经安装了QtCreator和Qt环境，网上也有很多教程因此不再赘述。&lt;/p&gt;
&lt;h2 id=&#34;环境搭建&#34;&gt;环境搭建&lt;/h2&gt;
&lt;p&gt;为了干净我选择使用virtualenv构建用于PyQt的虚拟环境。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ virtualenv pyqtenv
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; pyquenv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;pyqtenv&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;$ pip install PyQt5
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;似乎Qt Creator的python项目默认使用PySide2，但是在新建项目或者文件的时候有一个&amp;quot;Qt Module&amp;quot;的选项可以选择PyQt5或者PySide2。我选择PyQt5。&lt;/p&gt;
&lt;p&gt;需要注意执行前在Qt Creator的项目选项中选择Python解释器，即选择所安装的虚拟环境目录。通常情况下QtCreator会发现并自动生成“pyqtenv virtual environment”，如果没有自动生成则需要在manage选项中手动添加并选择执行路径&amp;quot;/path_to_your_env/pyqtenv/bin/python&amp;quot;。&lt;/p&gt;
&lt;h2 id=&#34;测试代码&#34;&gt;测试代码&lt;/h2&gt;
&lt;p&gt;由于人生苦短，我选择使用Qt Designer进行UI设计，如果是喜欢手撸代码的大佬请跳过以下内容。&lt;/p&gt;
&lt;p&gt;在Qt Creator中选择新建Qt Designer Form得到ui文件，并通过Qt Designer设计界面。得到mainwindow.ui界面文件。此时需要注意要将界面文件导入py项目需要使用PyQt5自带的一个工具pyuic5编译得到UI类。（如果有更好的方法欢迎告诉我，我也不想这么麻烦）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;source&lt;/span&gt; pyquenv/bin/activate
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;pyqtenv&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;$ pyuic5 -o ui_mainwindow.py mainwindow.ui
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;之后就可以在Qt Creator中添加ui编译得到的py文件，一种方法是使用UI类作为基类之一并使用self.setupUI(self)。还有一种方法是使用UI类作为成员，即self.ui = Ui_MainWindow()。我选择前者，代码如下。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;sys&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;PyQt5.QtWidgets&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QMainWindow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;ui_mainwindow&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ui_MainWindow&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;QMainWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Ui_MainWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nb&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MainWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;fm&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;setupUi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;self&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;__main__&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;app&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;QApplication&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([])&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;window&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MainWindow&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;window&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;sys&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;app&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;exec_&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以正常实现自己设计的UI界面就表明没啥问题了。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
