<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>基础知识 | YangLeiSX</title>
    <link>https://yangleisx.github.io/category/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <atom:link href="https://yangleisx.github.io/category/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    <description>基础知识</description>
    <generator>Hugo Blox Builder (https://hugoblox.com)</generator><language>en-us</language><lastBuildDate>Wed, 30 Sep 2020 15:56:03 +0800</lastBuildDate>
    <image>
      <url>https://yangleisx.github.io/media/icon_hu9d67daea6e408fd17d2331b8d809e90a_61652_512x512_fill_lanczos_center_3.png</url>
      <title>基础知识</title>
      <link>https://yangleisx.github.io/category/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
    </image>
    
    <item>
      <title>GNU、Clang/LLVM到底是些什么东西</title>
      <link>https://yangleisx.github.io/post/toolchain/</link>
      <pubDate>Wed, 30 Sep 2020 15:56:03 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/toolchain/</guid>
      <description>&lt;p&gt;说实话查了一些资料还不是很清楚，大概给出一个简单的理解。&lt;/p&gt;
&lt;p&gt;GNU Compiler Collection(GCC)是GNU推出的一套开源编译工具链。包括了make，sed，Emacs，glibc，gdb和gcc等工具，和Linux内核共同构成一套系统。支持C、C++、Obj-C、Fortran、Ada、Go等语言。&lt;/p&gt;
&lt;p&gt;Clang/LLVM是一套编译工具链，受到Apple的支持。包括中间语言LLVMIR，调试器，LLVMC++标准库，静态分析工具等。近年来包括Swift、Rust等都在使用LLVM作为编译框架。Clang是Apple开发用来取代GCC的前端编译器，与LLVM兼容性更好。&lt;/p&gt;
&lt;p&gt;Visual C++是微软的一套编译工具链，在Linux平台的支持比较差。&lt;/p&gt;
&lt;p&gt;MinGW(Minimalist GNU for Windows)是一个工具集，在Windows上提供了GNU下的多种工具，包括了GCC等。编译得到的结果运行在Windows系统之上。&lt;/p&gt;
&lt;p&gt;Cygwin是位于Windows系统下的POSIX环境。在Windows上提供了Unix\Linux命令的执行支持环境。将Linux环境的程序迁移到Windows中，实际上通过dll文件在Windows系统中模拟了Linux的系统调用。&lt;/p&gt;
&lt;p&gt;OpenMP是跨平台的并行API，更适用于一台多核机器上的并行处理。通过在代码中添加pragma omp的指令使得编译器自动生成并行执行的代码。&lt;/p&gt;
&lt;p&gt;MPI(Message Passing Interface)是跨平台的并行API，适用于多个运算节点间的通信和并行处理。&lt;/p&gt;
&lt;p&gt;OpenACC是一个计算加速API，支持CPU/GPU结构，可以提供科学计算等各种加速功能。通过在代码中添加pragma acc的指令使得运算得到加速。&lt;/p&gt;
&lt;p&gt;参考资料：
&lt;a href=&#34;https://medium.com/@alitech_2017/gcc-vs-clang-llvm-an-in-depth-comparison-of-c-c-compilers-899ede2be378&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCC和Clang/LLVM的比较&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GDB简单用法</title>
      <link>https://yangleisx.github.io/post/gdb-base/</link>
      <pubDate>Wed, 30 Sep 2020 15:44:34 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/gdb-base/</guid>
      <description>&lt;p&gt;简单了解了一下gdb的用法。
在已经了解lldb的基础上，再看gdb的用法就简单多了，大部分的操作都是基本一致的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;编译部分
a. 使用-g选项编译支持调试&lt;/li&gt;
&lt;li&gt;导入可执行文件
a. 在开启gdb时指定
b. 或者使用file指令导入&lt;/li&gt;
&lt;li&gt;运行可执行文件
a. 使用run开始运行
b. 使用continue继续运行到下一个断点
c. 使用step运行一行（进入函数）
d. 使用next运行一行&lt;/li&gt;
&lt;li&gt;添加断点
a. 使用break file.c:6在指定文件的指定行添加断点
b. 使用break func在指定函数添加断点
c. 使用info breakpoints显示断点信息
d. 使用delete b_id删除指定断点&lt;/li&gt;
&lt;li&gt;添加观察点
a. 观察点在变量值改变时中断程序并显示数据
b. watch var_name为指定变量添加观察点&lt;/li&gt;
&lt;li&gt;查看数据
a. 使用print打印变量的值
b. 使用backtrace查看跟踪栈&lt;/li&gt;
&lt;li&gt;条件断点：
a. 仅在满足某些条件时触发
b. break main.c:6 if I &amp;gt;= ARRAYSIZE&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>LLDB的简单使用</title>
      <link>https://yangleisx.github.io/post/lldb-base/</link>
      <pubDate>Sat, 26 Sep 2020 11:12:56 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/lldb-base/</guid>
      <description>&lt;p&gt;LLDB是一种C/C++程序的调试器工具，可以监控程序的变量值和堆栈的变化情况。在没有IDE情况下调试程序非常实用。网上找到的资料大多都是help信息的简单翻译，要想熟练使用还得经常练习。&lt;/p&gt;
&lt;h2 id=&#34;一次执行过程&#34;&gt;一次执行过程&lt;/h2&gt;
&lt;h3 id=&#34;测试代码&#34;&gt;测试代码&lt;/h3&gt;
&lt;p&gt;代码功能为获得C语言字符串的长度。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Hello World, I&amp;#39;m R2-D2.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;strlen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;The length of str is %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;编译过程&#34;&gt;编译过程&lt;/h3&gt;
&lt;p&gt;注意在编译过程中使用-g编译指令支持调试器的工作。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;CC&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; gcc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;CFLAGS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -g -std&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;c11 -Wall
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; test.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;OBJECT&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;SOURCE: .c&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.o&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;OBJECT&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OBJECT&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -o &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    rm *.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;基本流程&#34;&gt;基本流程&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 开启调试器&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ lldb main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 或者使用lldb开启调试器 使用file命令导入文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在指定文件指定行添加断点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; b test.c:11
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# breakpoint set --file test.c --line 11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# breakpoint set -f test.c -l 11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 开始运行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看当前函数和调用关系&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# backtrace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看本地变量(当前堆栈帧)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; frame variable
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 步进和运行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; next
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;常用的指令&#34;&gt;常用的指令&lt;/h2&gt;
&lt;h3 id=&#34;断点操作&#34;&gt;断点操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 在指定文件指定行添加断点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; b test.c:11
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# breakpoint set --file test.c --line 11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# breakpoint set -f test.c -l 11&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 为指定函数添加断点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; breakpoint &lt;span class=&#34;nb&#34;&gt;set&lt;/span&gt; --name strlen
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看断点&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; breakpoint list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 设置断点命令 即触发断点时执行操作 1.1为断点编号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; breakpoint &lt;span class=&#34;nb&#34;&gt;command&lt;/span&gt; add 1.1
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;启动和运行操作&#34;&gt;启动和运行操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 开始运行 在断点停止&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; r
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# run&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 继续运行 下一个断点停止&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# continue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 步进操作 运行下一行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; n
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# next&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 进入当前行函数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; step
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;查看操作&#34;&gt;查看操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看跟踪栈 即函数调用关系&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; bt
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# backtrace&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 查看栈帧 即局部变量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; frame variable &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt;variable_name&lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 选择栈帧 9为栈帧标号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; frame &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;9&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;线程操作&#34;&gt;线程操作&lt;/h3&gt;
&lt;p&gt;上述各种操作在多线程的环境中都可以对某一个线程进行操作&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; thread backtrace
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; thread list
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 运行直到12行&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; thread &lt;span class=&#34;k&#34;&gt;until&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;数据操作&#34;&gt;数据操作&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 修改程序中a的值&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;lldb&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt; exp &lt;span class=&#34;nv&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;参考资料：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lldb.llvm.org/use/tutorial.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LLDB TUTORIAL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cnblogs.com/shuxiachahu123/p/5419914.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LLDB调试器的使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://zhuanlan.zhihu.com/p/106415182&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LLDB 十分钟快速教程&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://techlarry.github.io/Miscellaneous/LLDB%e4%bd%bf%e7%94%a8/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LLDB使用&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网络安全概论</title>
      <link>https://yangleisx.github.io/post/intro-cyber-sec/</link>
      <pubDate>Fri, 17 Jul 2020 11:01:41 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/intro-cyber-sec/</guid>
      <description>&lt;p&gt;三小时女娲补天网安概论&lt;/p&gt;
&lt;h2 id=&#34;0x01网络信息安全发展历史&#34;&gt;0x01网络信息安全发展历史&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;网络信息安全历史：
&lt;ol&gt;
&lt;li&gt;通信保密阶段：COMSEC，20世纪20-60年代，主要解决发方和收方的信息源编码（Source Coding）、信道编码和传输（Channel Coding）、通信协议和密码的问题。&lt;/li&gt;
&lt;li&gt;信息安全阶段：INFOSEC，20世纪80-90年代，主要目标为保密性Confidential、完整性Integrity、可用性Availability。包括TCSEC橙皮书和ITSEC白皮书。&lt;/li&gt;
&lt;li&gt;信息保障阶段：IA，20世纪90年代至今，主要为为从整体角度考虑其体系建设的信息保障(Information Assurance)阶段，代表是美国的IATF规范。&lt;/li&gt;
&lt;li&gt;网络空间安全：2010年后&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;信息安全的基本特征：
&lt;ol&gt;
&lt;li&gt;相对性&lt;/li&gt;
&lt;li&gt;时效性&lt;/li&gt;
&lt;li&gt;安全攻击源和防范对象的不确定性&lt;/li&gt;
&lt;li&gt;反传统的技术思维和复杂的人-机关系&lt;/li&gt;
&lt;li&gt;相关性&lt;/li&gt;
&lt;li&gt;信息结构的高度脆弱性和风险性&lt;/li&gt;
&lt;li&gt;动态性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x02计算机网络&#34;&gt;0x02计算机网络&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;OSI七层模型&lt;/p&gt;
&lt;p&gt;应用层Application Layer，表示层Presentation Layer，会话层Session Layer，传输层Transport Layer，网络层Network Layer，数据链路层DataLink Layer，物理层Physical Layer&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;TCP/IP协议栈&lt;/p&gt;
&lt;p&gt;应用层，传输层，网络层，网络接口层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;五层参考模型&lt;/p&gt;
&lt;p&gt;应用层，传输层，网络层，数据链路层，物理层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;相关概念&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MAC地址&lt;/li&gt;
&lt;li&gt;IP地址、端口号、套接字Socket&lt;/li&gt;
&lt;li&gt;TCP vs. UDP&lt;/li&gt;
&lt;li&gt;域名解析&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;网络工具&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ping使用ICMP检查目标IP是否可达&lt;/li&gt;
&lt;li&gt;ipconfig/ifconfig查看网络配置信息&lt;/li&gt;
&lt;li&gt;netstat查看网络连接状态&lt;/li&gt;
&lt;li&gt;arp查看ARP缓存信息&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x03安全基础&#34;&gt;0x03安全基础&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;信息安全的定义：信息安全是防止对知识、事实、数据或能力的非授权使用、误用、篡改或拒绝使用所采取的措施。&lt;/li&gt;
&lt;li&gt;完整的定义：指在既定的安全密级条件下，信 息系统通过预警、保护、检测、响应、恢复和反击机制，抵 御意外事件或恶意行为攻击，确保信息系统避免非授权的访 问、破坏或者服务中断，实现信息和资源的保密性、完整性、 可用性、非否认性和可控性的能力。&lt;/li&gt;
&lt;li&gt;三要素：
&lt;ol&gt;
&lt;li&gt;机密性Confidential：不被截获和未授权使用&lt;/li&gt;
&lt;li&gt;完整性Integrity：内容真实可信、不被冒充伪造和篡改&lt;/li&gt;
&lt;li&gt;可用性Availability：信息和信息服务被授权人正常使用&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;其他属性：
&lt;ol&gt;
&lt;li&gt;不可否认性No-Repudiation：行为的不可否认&lt;/li&gt;
&lt;li&gt;可控性Controllability：验证Authentication和审计Accountability&lt;/li&gt;
&lt;li&gt;可存活性Survivability：在攻击和错误情况下继续提供服务&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;安全攻击
&lt;ol&gt;
&lt;li&gt;中断Interruption：破坏了可用性&lt;/li&gt;
&lt;li&gt;修改Modification：破坏了完整性&lt;/li&gt;
&lt;li&gt;伪造Fabrication：破坏了真实性&lt;/li&gt;
&lt;li&gt;截取Interception：破坏机密性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;安全服务
&lt;ol&gt;
&lt;li&gt;认证Authentication：提供实体的身份保证&lt;/li&gt;
&lt;li&gt;访问控制Access Control：授权资源访问&lt;/li&gt;
&lt;li&gt;机密性服务Confidential：信息不泄露和暴露&lt;/li&gt;
&lt;li&gt;完整性服务Integrity：数据的价值和存在性没有改变&lt;/li&gt;
&lt;li&gt;不可抵赖服务&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;安全机制：安全服务的实现
&lt;ol&gt;
&lt;li&gt;加密机制&lt;/li&gt;
&lt;li&gt;数字签名&lt;/li&gt;
&lt;li&gt;访问控制&lt;/li&gt;
&lt;li&gt;数据完整性&lt;/li&gt;
&lt;li&gt;通信业务流填充&lt;/li&gt;
&lt;li&gt;路由控制&lt;/li&gt;
&lt;li&gt;认证交换&lt;/li&gt;
&lt;li&gt;公证机制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x04威胁和攻击技术&#34;&gt;0x04威胁和攻击技术&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;安全问题的根源：
&lt;ol&gt;
&lt;li&gt;物理安全因素：设备本身的问题、环境的安全&lt;/li&gt;
&lt;li&gt;方案设计因素：安全策略不合理、安全配置不当、设计需要牺牲安全机制&lt;/li&gt;
&lt;li&gt;系统安全因素：操作系统和网络软件等的漏洞和后门&lt;/li&gt;
&lt;li&gt;TCP/IP协议的安全因素：设计之初没有考虑安全问题&lt;/li&gt;
&lt;li&gt;人的因素：无意的失误和错误、恶意攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;攻击技术：
&lt;ol&gt;
&lt;li&gt;被动攻击：窃听和监视数据传输，不对数据进行修改，难以检测，重在预防
&lt;ol&gt;
&lt;li&gt;嗅探sniff&lt;/li&gt;
&lt;li&gt;分析&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;主动攻击：数据流的篡改和错误数据的添加，能够检测，难以防止
&lt;ol&gt;
&lt;li&gt;假冒fabrication&lt;/li&gt;
&lt;li&gt;重放replay&lt;/li&gt;
&lt;li&gt;篡改modification&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;攻击过程
&lt;ol&gt;
&lt;li&gt;预攻击pre-attack：搜集信息，域名、IP、拓扑、OS、端口、服务&lt;/li&gt;
&lt;li&gt;攻击attack：远程权限、接入、本地权限、提权、攻击&lt;/li&gt;
&lt;li&gt;后攻击post-attack：植入木马、删除日志、进一步渗透&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;攻击手段：
&lt;ol&gt;
&lt;li&gt;网络监听sniff：监听网络状态和数据流&lt;/li&gt;
&lt;li&gt;密码破解crack：字典攻击、暴力破解&lt;/li&gt;
&lt;li&gt;会话劫持session hijack：”中间人攻击“&lt;/li&gt;
&lt;li&gt;缓冲区溢出buffer overflow：输入数据规模超过了给定缓冲区的大小&lt;/li&gt;
&lt;li&gt;拒绝服务攻击DoS：消耗目标资源使其无法为正常用户提供服务&lt;/li&gt;
&lt;li&gt;病毒和蠕虫worm：自我复制和传播，利用漏洞传播&lt;/li&gt;
&lt;li&gt;木马trojan：隐蔽运行，远程控制和信息窃取&lt;/li&gt;
&lt;li&gt;SQL注入SQL insert：访问数据库的动态网页&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;APT攻击：
&lt;ol&gt;
&lt;li&gt;高级可持续性攻击：Advanced Persistent Threat&lt;/li&gt;
&lt;li&gt;攻击路径：网络欺诈和0day攻击——找到漏洞——感染内部人员——获取数据&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x05网络信息安全模型&#34;&gt;0x05网络信息安全模型&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;网络通信模型：
&lt;ol&gt;
&lt;li&gt;包括：消息的安全转换、通信主体共享的秘密信息（密钥）、可信第三方trusted third party。&lt;/li&gt;
&lt;li&gt;消息经过安全转换后经由信道传输。其中的安全转换通过该秘密信息指导。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;访问安全模型：
&lt;ol&gt;
&lt;li&gt;外部安全：阻止非授权用户&lt;/li&gt;
&lt;li&gt;内部安全：内部安全控制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;P2DR模型：
&lt;ol&gt;
&lt;li&gt;安全策略Policy、防护Protection、检测Detection、响应Response&lt;/li&gt;
&lt;li&gt;基于时间的安全理论，通过每一个行为消耗的时间衡量安全能力&lt;/li&gt;
&lt;li&gt;暴露时间E = 检测时间 + 响应时间 - 攻击时间。攻击时间越短、响应时间越长，则暴露时间越长，系统越危险。当暴露时间小于0，可以认为系统是安全的。&lt;/li&gt;
&lt;li&gt;系统安全 = 风险分析 + 安全策略 + 系统防护 + 实时监测 + 实时响应 + 灾难恢复，其中外围五个因素都收到了系统安全策略的影响。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;信息技术安全评估准则：
&lt;ol&gt;
&lt;li&gt;TCSEC桔皮书：A、B3、B2、B1、C2、C1、D&lt;/li&gt;
&lt;li&gt;INSEC桔皮书的进一步发展&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x06密码学技术&#34;&gt;0x06密码学技术&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;密码学发展：手工阶段、机器阶段、现代密码学&lt;/li&gt;
&lt;li&gt;基本概念：
&lt;ol&gt;
&lt;li&gt;Cryptology、Cryptography、Cryptanalysis&lt;/li&gt;
&lt;li&gt;加密Encryption、解密Decryption&lt;/li&gt;
&lt;li&gt;无条件安全Unconditionally Security、计算安全Computationally Security&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;编码原则：加密算法建立在算法的公开不影响铭文和密钥的安全&lt;/li&gt;
&lt;li&gt;古典密码：古典替换（substitution，替换明文）、古典置换（permutation/transportation，改变明文字符的位置）&lt;/li&gt;
&lt;li&gt;密码分析方式：
&lt;ol&gt;
&lt;li&gt;唯密文攻击：只有密文串和加密算法，利用统计方式分析&lt;/li&gt;
&lt;li&gt;已知明文攻击：具有明文密文和加密算法，推导密钥&lt;/li&gt;
&lt;li&gt;自适应选择明文攻击：攻击者选择明文并得到对应的密文&lt;/li&gt;
&lt;li&gt;选择密文攻击：攻击者选择密文兵构造对应的明文&lt;/li&gt;
&lt;li&gt;选择文本攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;典型攻击方式：
&lt;ol&gt;
&lt;li&gt;暴力攻击Brute Force：穷举法、字典攻击&lt;/li&gt;
&lt;li&gt;数学方式：差分攻击（明文插值对密文插值的影响）、线性密码、插值攻击&lt;/li&gt;
&lt;li&gt;密钥相关攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对称密钥体系：
&lt;ol&gt;
&lt;li&gt;分组密码：明文和密文分组，相同密钥和明文能得到相同密文&lt;/li&gt;
&lt;li&gt;序列密码：流密码，按bit加密&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;分组密码原理：
&lt;ol&gt;
&lt;li&gt;明文消息编码得到的序列分组，在密钥控制下变换成等长的输出序列&lt;/li&gt;
&lt;li&gt;混乱原则：Confusion，即使用替换法Substitution，S-box。防止利用明文和密文的依赖关系破解。&lt;/li&gt;
&lt;li&gt;扩散原则：Diffusion，即使用置换法Permutation，P-box。密钥的每位数字影响密文的多个数字，明文的每位数字影像密文的多个数字。&lt;/li&gt;
&lt;li&gt;Feistel加密结构：多轮迭代、使用动态子密钥&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数据加密标准DES：
&lt;ol&gt;
&lt;li&gt;56bit的密钥加密64bit的明文分组&lt;/li&gt;
&lt;li&gt;16轮迭代&lt;/li&gt;
&lt;li&gt;double-DES、triple-DES&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;高级加密标准AES：
&lt;ol&gt;
&lt;li&gt;明文分组为16字节128bit&lt;/li&gt;
&lt;li&gt;10轮迭代，但是不是Feistel结构&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;随机数：
&lt;ol&gt;
&lt;li&gt;特性：不可预料性、统计独立性&lt;/li&gt;
&lt;li&gt;生成方法：自然随机数源，随机数生成函数，通常只能生成伪随机数序列&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;流密码：
&lt;ol&gt;
&lt;li&gt;原理：一次一密的密码体制绝对安全。&lt;/li&gt;
&lt;li&gt;使用种子密钥生成密钥序列，利用密钥序列一次加密明文的一个或几个比特&lt;/li&gt;
&lt;li&gt;硬件实现简单&lt;/li&gt;
&lt;li&gt;公开算法包括RC4算法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;分组密码模式：
&lt;ol&gt;
&lt;li&gt;ECB电子密码本：每一个分组使用相同的密钥&lt;/li&gt;
&lt;li&gt;CBC分组链接：当前明文段与上一密文段异或处理后进行加密&lt;/li&gt;
&lt;li&gt;CFB密码反馈：将分组密码转为流密码&lt;/li&gt;
&lt;li&gt;CTR计数器：计数器加密后与明文异或后进行加密&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x07公钥密码技术&#34;&gt;0x07公钥密码技术&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;消息认证：
&lt;ol&gt;
&lt;li&gt;验证发送者的身份（真实性），验证信息完整性&lt;/li&gt;
&lt;li&gt;常规方式：共享密钥、序列号、时间戳、错误检测码&lt;/li&gt;
&lt;li&gt;非加密方式：报文鉴别码、单向散列函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;消息认证码MAC：
&lt;ol&gt;
&lt;li&gt;使用密钥，从消息中生成数据，成为MAC或密码校验和（cryptographic checksum）&lt;/li&gt;
&lt;li&gt;通信双方使用相同的密钥计算MAC并验证，保证了完整性和真实性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;信息摘要/哈希/散列函数：
&lt;ol&gt;
&lt;li&gt;变长输入压缩到定长的输出，输入改变后输出变化很大。&lt;/li&gt;
&lt;li&gt;MAC计算速度慢，需要密钥，但是计算信息摘要不需要密钥，只能验证完整性&lt;/li&gt;
&lt;li&gt;特点：单向性、抗碰撞性&lt;/li&gt;
&lt;li&gt;安全问题：密码分析法（分析算法缺陷）、穷举攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;典型散列算法：
&lt;ol&gt;
&lt;li&gt;MD5：明文补全为512bit的组，生成128bit的摘要，已经被证明了不安全可以破解。&lt;/li&gt;
&lt;li&gt;SHA：明文补全为512bit的组，生成160bit的摘要，记录在5个32bit的数据中。&lt;/li&gt;
&lt;li&gt;HMAC：使用散列函数实现的MAC，使用密钥参与哈希过程&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;公钥密码思想：
&lt;ol&gt;
&lt;li&gt;公钥公开，私钥保密，私钥可导出公钥，公钥难以计算私钥。&lt;/li&gt;
&lt;li&gt;公私钥的生成利用了单向陷门函数，即容易计算但难以求逆，给定陷门后易于求逆。&lt;/li&gt;
&lt;li&gt;常用数学难题：大整数因子分解，有限域上乘法群的离散对数问题，椭圆曲线离散对数问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;RSA机制：
&lt;ol&gt;
&lt;li&gt;利用大整数因子分解难题&lt;/li&gt;
&lt;li&gt;给定素数p、q，公开其乘积n，选择e与$\varphi(n)$互素，计算$d=e^{-1}mod\ \varphi(n)$。&lt;/li&gt;
&lt;li&gt;给定私钥p和q和d，计算公钥e和n比较简单，但是逆运算非常难。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Diffie-Hellman密钥交换：
&lt;ol&gt;
&lt;li&gt;用户事先共享a和p&lt;/li&gt;
&lt;li&gt;用户选择随机数$X_A$和$X_B$&lt;/li&gt;
&lt;li&gt;计算$Y_A = a^{X_A}mod\ p$和$Y_B = a^{X_B} mod\ p$并交换&lt;/li&gt;
&lt;li&gt;计算$K = Y_B^{X_A} mod\ p= Y_A^{X_A}mod\ p$。&lt;/li&gt;
&lt;li&gt;容易被中间人攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;椭圆曲线机制ECC，相比RSA在较短的密钥提供了更高的安全性。&lt;/li&gt;
&lt;li&gt;对称和非对称加密
&lt;ol&gt;
&lt;li&gt;对称加密：速度快，密钥短但是管理困难&lt;/li&gt;
&lt;li&gt;非对称加密：密钥管理简单，可以数字签名，速度慢&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;数字签名技术：
&lt;ol&gt;
&lt;li&gt;同时保护信息完整性和信息发送者的身份确认&lt;/li&gt;
&lt;li&gt;原理：数字信息经过散列函数计算摘要，使用私钥加密信息摘要并作为信息的一部分。使用公钥解密得到摘要并检查信息的完整性。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x08密钥分发和用户认证&#34;&gt;0x08密钥分发和用户认证&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;密码管理处理密码产生到销毁过程中的各个问题，包括初始化、产生、存储、分配、停用、更新、销毁。&lt;/li&gt;
&lt;li&gt;密钥生产形式：密钥管理中心集中生产（有边界生产），个人生成（无边界生产）&lt;/li&gt;
&lt;li&gt;密钥分配：自动分配机制减轻负担，同时尽量减小密钥量&lt;/li&gt;
&lt;li&gt;对称密码体制：
&lt;ol&gt;
&lt;li&gt;一方选择密钥，通过安全方式传递给另一方&lt;/li&gt;
&lt;li&gt;可信第三方选定，安全方式传递给双方&lt;/li&gt;
&lt;li&gt;使用旧密钥加密新密钥传输&lt;/li&gt;
&lt;li&gt;可信第三方的加密分发：设立KDC(Key Distribution Center)使用永久密钥加密传输会话密钥，会话密钥用于加密会话内容，一次一密。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;分布式环境认证：
&lt;ol&gt;
&lt;li&gt;一组工作站和一组分布式服务器组成&lt;/li&gt;
&lt;li&gt;工作站可以保证用户认证，客户端向服务器验证，客户端和服务器的双向验证&lt;/li&gt;
&lt;li&gt;Kerberos：提供两个密钥TGT和ST，用户向DC验证身份得到TGT，访问服务时通过TGT得到ST，使用ST与服务器加密传输并验证身份。&lt;/li&gt;
&lt;li&gt;kerberos保存有用户的ID和密钥散列，同时与每一个应用服务器共享一个保密密钥。&lt;/li&gt;
&lt;li&gt;一个kerberos环境包括kerberos服务器、应用服务器和工作站。实际上存在跨环境的访问，此时需要不同环境的Kerberos服务器之间共享一个密钥实现相互注册。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;公钥证书：
&lt;ol&gt;
&lt;li&gt;证书管理机构CA（Certificate Authority），证书Certificate&lt;/li&gt;
&lt;li&gt;证书包括用户的相关信息，用户的公钥，时间戳等&lt;/li&gt;
&lt;li&gt;CA使用公开公钥，使用自己的私钥为证书签名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;对称+非对称的密钥分配：
&lt;ol&gt;
&lt;li&gt;使用对称密钥加密信息，使用非对称加密方式分发加密密钥&lt;/li&gt;
&lt;li&gt;分配步骤：使用对方公钥加密交互信息（验证对方身份）+使用自己私钥和对方公钥加密信息密钥+使用信息密钥加密传输&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;X.509标准：
&lt;ol&gt;
&lt;li&gt;CA为用户颁发证书，证书包括用户公钥，使用CA公钥签名&lt;/li&gt;
&lt;li&gt;CA保证了用户信息的正确性，证书内容无法伪造或篡改&lt;/li&gt;
&lt;li&gt;根CA向下级CA签名，构建树状结构、证书链&lt;/li&gt;
&lt;li&gt;根证书可以是自签名的&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PKI公钥基础设施：
&lt;ol&gt;
&lt;li&gt;PKI是生成、管理、存储、分发和吊销基于公钥密码学的公钥证书所需要的硬件、软件、人员、策略和规程的总和&lt;/li&gt;
&lt;li&gt;包括证书库、CA、RA、证书注销列表、密钥备份恢复、应用接口&lt;/li&gt;
&lt;li&gt;用户的证书请求经由RA发送到CA&lt;/li&gt;
&lt;li&gt;不同的CA之间可以交叉认证，交换密钥信息，验证对方的可信任性&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;信息隐藏：利用载体中随机性的荣誉部分隐藏秘密信息。&lt;/li&gt;
&lt;li&gt;数字水印&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x09网络访问控制和云安全&#34;&gt;0x09网络访问控制和云安全&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;访问控制：允许或限制访问能力和范围。包括阻止对资源的未授权访问和拒绝向非授权主体提供服务&lt;/li&gt;
&lt;li&gt;访问控制实体：
&lt;ol&gt;
&lt;li&gt;客体：被保护的资源对象&lt;/li&gt;
&lt;li&gt;主体：访问行为发起者&lt;/li&gt;
&lt;li&gt;授权：安全访问策略，规定主体对客体执行的动作&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;访问控制策略
&lt;ol&gt;
&lt;li&gt;最小特权策略，&lt;/li&gt;
&lt;li&gt;最小泄露策略&lt;/li&gt;
&lt;li&gt;多级安全策略&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;EAP协议（Extensible Authentication Protocol）：运行在链路层的安全认证协议&lt;/li&gt;
&lt;li&gt;IEEE 802.1X协议：基于端口的认证策略&lt;/li&gt;
&lt;li&gt;云计算：并行计算、分布式计算、网格计算的融合和发展
&lt;ol&gt;
&lt;li&gt;一种弹性计算资源，通过网络获取的共享资源&lt;/li&gt;
&lt;li&gt;网络获取、可伸缩性、资源共享&lt;/li&gt;
&lt;li&gt;服务模式：SaaS软件即服务、PaaS平台即服务、IaaS基础设施即服务&lt;/li&gt;
&lt;li&gt;部署模型：公有云、私有云、社区云、混合云&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;云计算安全风险：滥用和恶意使用、不安全的API、数据泄露、账户或服务劫持&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x0a-web安全和传输层安全&#34;&gt;0x0A WEB安全和传输层安全&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;架构：Browser/Server结构，应用层使用HTTP协议&lt;/li&gt;
&lt;li&gt;Web内容
&lt;ol&gt;
&lt;li&gt;静态内容：固定网页的访问&lt;/li&gt;
&lt;li&gt;动态内容：利用数据库维护，动态生成网页内容&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Web不安全的根源：
&lt;ol&gt;
&lt;li&gt;Internet的开放性，任何人都可以建立web站点&lt;/li&gt;
&lt;li&gt;DNS域名可以自由注册，按时间顺序&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;浏览器安全问题
&lt;ol&gt;
&lt;li&gt;辅助应用程序：web数据是浏览器无法解析的类型时，会自动调用辅助应用程序&lt;/li&gt;
&lt;li&gt;插件：浏览特定信息的软件模块，可以发送有害数据攻击&lt;/li&gt;
&lt;li&gt;Cookie：存储传递的状态信息，可能会泄露用户的信息&lt;/li&gt;
&lt;li&gt;脚本：运行在服务器/浏览器上的程序，可以嵌入恶意代码&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;服务器安全问题：
&lt;ol&gt;
&lt;li&gt;口令被破解&lt;/li&gt;
&lt;li&gt;文件被未授权访问&lt;/li&gt;
&lt;li&gt;DoS攻击&lt;/li&gt;
&lt;li&gt;命令注入攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;web安全：
&lt;ol&gt;
&lt;li&gt;浏览器安全：限制权限、限制数据类型&lt;/li&gt;
&lt;li&gt;服务器安全：访问控制、认证、防火墙、日志、用户账户管理、服务端口管理&lt;/li&gt;
&lt;li&gt;流量安全&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;流量安全：IPsec、SSL/TLS、HTTPS等&lt;/li&gt;
&lt;li&gt;SSL/TLS：传输层安全协议
&lt;ol&gt;
&lt;li&gt;建立在TCP之上的安全套接层，包括握手协议、压缩、加解密、计算校验&lt;/li&gt;
&lt;li&gt;传输流程：分段，压缩，增加MAC，加密，增加SSL记录（头部），得到SSL报文&lt;/li&gt;
&lt;li&gt;握手流程：交换基本信息、传输证书并确认、密钥交换获得会话密钥&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;HTTPS：应用层安全协议，即HTTP+SSL/TLS&lt;/li&gt;
&lt;li&gt;SSH：安全的远程登录和交互式会话，可以替代telnet，也可以建立传输隧道。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x0b-无线网络安全&#34;&gt;0x0B 无线网络安全&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;无线网络组网：基站，Wi-Fi热点、无线AP&lt;/li&gt;
&lt;li&gt;无线网络特点：
&lt;ol&gt;
&lt;li&gt;开放性：容易接入，无硬件防护&lt;/li&gt;
&lt;li&gt;移动性：设备移动范围较大&lt;/li&gt;
&lt;li&gt;动态性：动态拓扑&lt;/li&gt;
&lt;li&gt;不稳定性：信道传输不稳定，易监听和干扰&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;无线网络安全威胁：
&lt;ol&gt;
&lt;li&gt;窃听、监听、截取：入侵者接入系统&lt;/li&gt;
&lt;li&gt;主动攻击：IP/MAC欺骗、DoS攻击、恶意代码、网络接管&lt;/li&gt;
&lt;li&gt;法律问题&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;移动设备安全问题：缺乏物理控制、不可信网络、未知来源程序等&lt;/li&gt;
&lt;li&gt;传输安全：数据加密、认证机制、防火墙、入侵检测等&lt;/li&gt;
&lt;li&gt;WLAN标准：802.11协议、Bluetooth协议等&lt;/li&gt;
&lt;li&gt;802.11协议框架
&lt;ol&gt;
&lt;li&gt;只涉及物理层和数据链路层的MAC子层，上层与其他保持一致。&lt;/li&gt;
&lt;li&gt;最小组成块BSS包括一个接入点AP和若干个移动站STA。&lt;/li&gt;
&lt;li&gt;通过固定设施将若干BSS组成一个整体ESS&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;WLAN安全：
&lt;ol&gt;
&lt;li&gt;考虑：组织未授权用户进入网络，防止数据窃听&lt;/li&gt;
&lt;li&gt;安全服务：AP的SSID匹配、有线等效保密WEP、物理地址MAC过滤&lt;/li&gt;
&lt;li&gt;WEP机制：提供身份验证、加密和密钥管理、完整性检查。认证太简单被破解、单向认证、重放攻击、密钥管理机制不完整&lt;/li&gt;
&lt;li&gt;WPA机制：WEP机制的进一步发展，每一个分组使用不同的分组密钥&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;安全无线网络802.11i标准
&lt;ol&gt;
&lt;li&gt;包括801.1x协议、EAP、RADIUS协议&lt;/li&gt;
&lt;li&gt;包括TKIP密钥协议和CCMP安全协议&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x0c-电子邮件安全&#34;&gt;0x0C 电子邮件安全&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;电子邮件发送流程：
&lt;ol&gt;
&lt;li&gt;用户与用户代理MUA交互，使用POP或者IMAP协议&lt;/li&gt;
&lt;li&gt;用户代理借助报文传输代理交互，使用SMTP协议&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;电子邮件安全问题：
&lt;ol&gt;
&lt;li&gt;协议安全问题，例如SMTP和MIME的安全问题&lt;/li&gt;
&lt;li&gt;内容安全：邮件窃听、邮件欺骗、利用邮件传播病毒&lt;/li&gt;
&lt;li&gt;垃圾邮件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;电子邮件安全机制
&lt;ol&gt;
&lt;li&gt;端到端安全机制：PGP，S/MIME等&lt;/li&gt;
&lt;li&gt;传输层安全机制：SSL SMTP，SSL POP等&lt;/li&gt;
&lt;li&gt;应用层网关&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;PGP安全邮件标准
&lt;ol&gt;
&lt;li&gt;提供服务：认证（使用数字签名）、保密（使用对称加密）、压缩（zip压缩）、兼容性（base64编码）、分段重组&lt;/li&gt;
&lt;li&gt;密钥：会话密钥、公钥、私钥、口令&lt;/li&gt;
&lt;li&gt;定义了密钥ID，即公钥的低64位作为身份的标识符&lt;/li&gt;
&lt;li&gt;用户的私钥使用口令进行CAST-128/IDEA/3DES加密&lt;/li&gt;
&lt;li&gt;基于信任的关系模型，每个公钥被签名，用户对公钥的信任程度取决于对签名人的信任程度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;SMTP：
&lt;ol&gt;
&lt;li&gt;只能传输ASCII字符&lt;/li&gt;
&lt;li&gt;邮件内容大小的限制&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;S/MIME：
&lt;ol&gt;
&lt;li&gt;MIME的安全性扩展&lt;/li&gt;
&lt;li&gt;结合PKI，使用X.509证书&lt;/li&gt;
&lt;li&gt;提供数据加密、数据签名、加密和签名的嵌套&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;DKIM电子邮件验证标准：
&lt;ol&gt;
&lt;li&gt;邮件的加密签名和域名/企业关联起来，防止电子邮件欺诈&lt;/li&gt;
&lt;li&gt;公钥位于DNS，私钥位于邮件服务器，在邮件中签名&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x0d-ip安全&#34;&gt;0x0D IP安全&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;当前的互联网使用TCP/IP协议栈，基本完全建立在IP之上，但是IP协议设计时并没有考虑很多安全问题，从本质上来说就是不安全的，修改IP报文非常简单。攻击包括：窃听、篡改、IP欺骗、重防攻击&lt;/li&gt;
&lt;li&gt;IPsec：
&lt;ol&gt;
&lt;li&gt;IP协议中集成的安全机制&lt;/li&gt;
&lt;li&gt;在IP层上创建安全的隧道层VPN&lt;/li&gt;
&lt;li&gt;包括三个协议：AH协议、ESP协议、IKE协议&lt;/li&gt;
&lt;li&gt;两种操作模式：传输模式和隧道模式&lt;/li&gt;
&lt;li&gt;两个数据库：安全策略数据库SPD，安全关联数据库SAD&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;IPsec的体系：DOI即解释域，使用IKE协商SA。&lt;/li&gt;
&lt;li&gt;工作模式：
&lt;ol&gt;
&lt;li&gt;传输模式：保护IP载荷，用于主机的端到端通信&lt;/li&gt;
&lt;li&gt;隧道模式：保护IP包，将旧包封装在新包中传输，用于网关模式&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;SA安全关联
&lt;ol&gt;
&lt;li&gt;IPsec的基础，两个实体协商建立的协定&lt;/li&gt;
&lt;li&gt;内容包括IPsec协议，工作模式、各种算法、密钥、窗口、计数器等信息&lt;/li&gt;
&lt;li&gt;单向的逻辑连接，因此常成对出现&lt;/li&gt;
&lt;li&gt;三个参数惟一标示：安全参数索引、目的IP地址、安全协议标识符&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;SAD：每个SA的参数值&lt;/li&gt;
&lt;li&gt;SPD：人机的安全接口&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;【后面还有很多内容 暂时跳过】&lt;/p&gt;
&lt;h2 id=&#34;0x0e-恶意软件&#34;&gt;0x0E 恶意软件&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;恶意破坏作用的代码和程序，非授权性和破坏性&lt;/li&gt;
&lt;li&gt;恶意代码：
&lt;ol&gt;
&lt;li&gt;病毒：自我复制和破坏&lt;/li&gt;
&lt;li&gt;蠕虫：自我复制和传播，消耗系统资源&lt;/li&gt;
&lt;li&gt;木马：窃取信息，远程控制，隐藏&lt;/li&gt;
&lt;li&gt;僵尸：远程控制发动攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;病毒特征：传染性、隐蔽性、潜伏性、破坏性、寄生性&lt;/li&gt;
&lt;li&gt;病毒生命周期：睡眠、传播、触发、执行&lt;/li&gt;
&lt;li&gt;宏病毒：将宏代码写入模版文件，再写入所有的文件中&lt;/li&gt;
&lt;li&gt;蠕虫：利用漏洞自主传播消耗资源&lt;/li&gt;
&lt;li&gt;木马：隐蔽窃取信息，自启动，信息传播&lt;/li&gt;
&lt;li&gt;僵尸网络：CC服务器控制大量僵尸主机&lt;/li&gt;
&lt;li&gt;钓鱼和鱼叉攻击：伪造信息获得信任&lt;/li&gt;
&lt;li&gt;病毒检测：
&lt;ol&gt;
&lt;li&gt;特征码检测&lt;/li&gt;
&lt;li&gt;文件比较&lt;/li&gt;
&lt;li&gt;启发式扫描、文件散列&lt;/li&gt;
&lt;li&gt;行为检测、沙箱&lt;/li&gt;
&lt;li&gt;系统边界、流量检测&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;DDoS：消耗目标服务器计算资源/缓冲区，利用协议设计的漏洞&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x0f-入侵检测&#34;&gt;0x0F 入侵检测&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;三种手段：
&lt;ol&gt;
&lt;li&gt;统计分析：统计正常使用的属性&lt;/li&gt;
&lt;li&gt;模式匹配：匹配误用数据库&lt;/li&gt;
&lt;li&gt;完整性分析：检查文件和对象是否被更改&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;两种模型：
&lt;ol&gt;
&lt;li&gt;异常检测Anomaly Detection：基于用户行为，包括各类阈值&lt;/li&gt;
&lt;li&gt;误用检测Misuse Detection：基于规则和模式匹配，记录非正常操作的规则和特征&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;信息响应：
&lt;ol&gt;
&lt;li&gt;主动响应：根据检测到的入侵行为采取措施&lt;/li&gt;
&lt;li&gt;被动响应：记录和报告问题&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;主动响应：
&lt;ol&gt;
&lt;li&gt;搜集信息：使用蜜罐等技术&lt;/li&gt;
&lt;li&gt;入侵追踪：基于主机或者给予网络&lt;/li&gt;
&lt;li&gt;联动响应：通知防火墙和其他控制设备加以响应和处理&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;审计记录
&lt;ol&gt;
&lt;li&gt;对于用户的行为做记录&lt;/li&gt;
&lt;li&gt;包括：主体、客体、时间戳、异常条件、行为&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;IDS：
&lt;ol&gt;
&lt;li&gt;从系统关键点搜集信息，检测是否有攻击发生并发出警告&lt;/li&gt;
&lt;li&gt;基本不具有访问控制能力，只能用于侦察和预警&lt;/li&gt;
&lt;li&gt;是防火墙的补充&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;IDS分类
&lt;ol&gt;
&lt;li&gt;基于主机：从主机中获得数据&lt;/li&gt;
&lt;li&gt;基于网络：获得的信息为网络中的数据包&lt;/li&gt;
&lt;li&gt;混合型，完备的IDS是网络和主机混合的分布式系统&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;口令的脆弱性：字典攻击、穷举攻击、Hash表攻击等&lt;/li&gt;
&lt;li&gt;口令的防护：安全策略（时间、长度、复杂性）、限制尝试次数、加盐&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;0x10-防火墙&#34;&gt;0x10 防火墙&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;防火墙：内外网边界的过滤机制，保护本地系统不受网络安全威胁&lt;/li&gt;
&lt;li&gt;划分：
&lt;ol&gt;
&lt;li&gt;内部网络：安全可信赖&lt;/li&gt;
&lt;li&gt;外部网络：不安全，不可信赖&lt;/li&gt;
&lt;li&gt;DMZ非军事区：内网对外提供服务的主机位于非军事区&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;防火墙提供了服务控制、方向控制、用户控制和行为控制&lt;/li&gt;
&lt;li&gt;分类
&lt;ol&gt;
&lt;li&gt;包过滤：在网络层，根据数据包的报头信息加以处理&lt;/li&gt;
&lt;li&gt;网关/代理服务器：在应用层，处理用户的应用层请求&lt;/li&gt;
&lt;li&gt;状态监测：在传输层和应用层，检测传输层连接的跟踪&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;SOCKS防火墙安全会话转移协议：
&lt;ol&gt;
&lt;li&gt;一种传输层的网络代理协议&lt;/li&gt;
&lt;li&gt;利用防火墙简单的转发传输数据包&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;防火墙部署：
&lt;ol&gt;
&lt;li&gt;双宿主机Dual-homed，位于不同网络上的多个网卡&lt;/li&gt;
&lt;li&gt;屏蔽主机：增加路由器，数据先经过包过滤路由器和堡垒主机&lt;/li&gt;
&lt;li&gt;屏蔽子网：两个路由器，形成DMZ隔离带&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
    
    <item>
      <title>HTTPS初步理解</title>
      <link>https://yangleisx.github.io/post/https/</link>
      <pubDate>Tue, 14 Apr 2020 16:34:05 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/https/</guid>
      <description>&lt;p&gt;相关概念：SSL、TLS、证书。&lt;/p&gt;
&lt;p&gt;SSL或TLS运行在传输层和应用层之间。（早期称为SSL，后期称为TLS）。用户网络加密通讯。&lt;/p&gt;
&lt;p&gt;HTTPS可以看作HTTP+TLS，包括两个部分：握手协议+记录协议。&lt;/p&gt;
&lt;p&gt;链接流程（握手协议）主要流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端HELLO（发送支持的TLS版本）&lt;/li&gt;
&lt;li&gt;服务器HELLO（选择TLS版本，发送服务器证书）&lt;/li&gt;
&lt;li&gt;客户端检查证书，生成主密钥（随机数）并使用服务器证书加密&lt;/li&gt;
&lt;li&gt;服务器解密后对主密钥加密并发回（类似Diffie Hellman交换）&lt;/li&gt;
&lt;li&gt;客户端验证主密钥，使用主密钥得到交换密钥用于非对称加密&lt;/li&gt;
&lt;li&gt;服务器验证客户端（可选）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;主要概念：使用服务器的公钥加密一个信息，服务器使用公钥解密后将该信息以客户端公钥加密后发回。用户客户端和服务器之间的验证。&lt;/p&gt;
&lt;p&gt;记录协议中将应用层数据分段、压缩、添加下层首部（HTTP）、对称加密、添加TLS头部并发送。&lt;/p&gt;
&lt;p&gt;证书包括公钥内容和私钥拥有者的信息。属于可信第三方（公钥基础设施PKI），用于证明公钥内容正确性。&lt;/p&gt;
&lt;p&gt;通常由CA机构使用自己的私钥为服务器的证书请求添加数字签名。拿到证书以后，客户端通过使用CA的公钥解密得到证书内部的服务器公钥。CA使用层次签名，顶级CA的证书使用自签名，其公钥在全网公开。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Make进阶使用</title>
      <link>https://yangleisx.github.io/post/makefile-plus/</link>
      <pubDate>Thu, 09 Apr 2020 14:33:35 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/makefile-plus/</guid>
      <description>&lt;p&gt;由于课程需要，进一步学习了一下make的使用，在之前的基础上添加一些高级知识，
同时提供一个makefile的模版共以后使用。&lt;/p&gt;
&lt;h2 id=&#34;make的内部规则&#34;&gt;Make的内部规则&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;目标&lt;/th&gt;
&lt;th&gt;依赖&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;x.o&lt;/td&gt;
&lt;td&gt;x.c&lt;/td&gt;
&lt;td&gt;cc -c x.c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x.o&lt;/td&gt;
&lt;td&gt;x.s&lt;/td&gt;
&lt;td&gt;as -o x.s&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x.o&lt;/td&gt;
&lt;td&gt;x.y&lt;/td&gt;
&lt;td&gt;yacc x.y&lt;br /&gt;cc -c y.tab.c&lt;br /&gt;rm y.tab.c&lt;br /&gt;mv y.tab.o x.o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x.o&lt;/td&gt;
&lt;td&gt;x.l&lt;/td&gt;
&lt;td&gt;lex x.l&lt;br /&gt;cc -c lex.yy.c&lt;br /&gt;rm -f lex.yy.c&lt;br /&gt;mv les.yy.o x.o&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x.c&lt;/td&gt;
&lt;td&gt;x.y&lt;/td&gt;
&lt;td&gt;yacc x.y&lt;br /&gt;mv y.tab.c x.c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x.c&lt;/td&gt;
&lt;td&gt;x.l&lt;/td&gt;
&lt;td&gt;lex x.l&lt;br /&gt;mv les.yy.c x.c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;x.a&lt;/td&gt;
&lt;td&gt;x.c&lt;/td&gt;
&lt;td&gt;cc -c x.c&lt;br /&gt;ar rv x.a x.c&lt;br /&gt;rm -f x.o&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;利用上述规则可以简写makefile。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;libylmath&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ylmathp&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    cc -o main -L . -l ylmath main.o ylmathp.o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;libylmath.a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;libylmath&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;(&lt;span class=&#34;n&#34;&gt;ylmath&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;ylmathp.o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ylmathp&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;h&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;make的内部宏&#34;&gt;Make的内部宏&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;内部宏&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;$&amp;lt;&lt;/td&gt;
&lt;td&gt;使目标过时的依赖文件（即已更新的文件）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$*&lt;/td&gt;
&lt;td&gt;不带后缀的依赖文件(常用写法$*.c)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$@&lt;/td&gt;
&lt;td&gt;目标文件名，用于显式说明行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$?&lt;/td&gt;
&lt;td&gt;类似$&amp;lt; 用于显式说明行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;$%&lt;/td&gt;
&lt;td&gt;用于处理库文件的依赖文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这些宏大多用于修改上述隐含规则或创建自己的隐含规则。&lt;/p&gt;
&lt;h2 id=&#34;实用技巧&#34;&gt;实用技巧&lt;/h2&gt;
&lt;p&gt;使用一个例子展示如下&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 使用宏定义增加可移植性
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;INSTDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; bin
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;CFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; -O -g
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;LDFLAGS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;CC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; cc
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 文件声明
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEADERS&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ylmath.h ylmathp.h
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; main.c ylmathp.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;OBJECT&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;SOURCE: .c&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;.o&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 库声明
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LIBSRC&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ylmath.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;LIBOBJ&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; ylmath.o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;LIBDIR&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; lib
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 覆盖默认的.c.o规则，添加-O(优化) -g(调试)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;.c.o&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CFLAGS&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -c &lt;span class=&#34;nv&#34;&gt;$*&lt;/span&gt;.c
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 连接得到可执行文件
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;demo&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;OBJECT&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;libylmath&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;CC&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -o &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;OBJECT&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -L&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;LIBDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; -lylmath
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;all&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;install&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 声明头文件，使用.c.o规则生成
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;$(OBJECT)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;HEADERS&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 使用.c.a规则生成库并移到lib文件夹
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# -开头的命令忽略运行错误和命令返回码，继续执行
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;libylmath.a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;libylmath&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;(&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;LIBOBJ&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -mv &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;LIBDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/libylmath.a libylmath.a.old
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -mv libylmath.a &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;LIBDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/libylmath.a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 更新bin文件夹
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;install&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;demo&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;libylmath&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -mv &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/demo demo.old
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -mv demo &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;INSTDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/demo
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 删除
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    -rm *.old demo &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;LIBDIR&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;/libylmath.a
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# 记录更新信息
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;# @开头的命令在运行时不显示
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;SOURCE&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;OBJECT&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; printing modified files
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    @ &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$?&lt;/span&gt; &amp;gt; &lt;span class=&#34;nv&#34;&gt;$@&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Linux下软件安装</title>
      <link>https://yangleisx.github.io/post/linux-software/</link>
      <pubDate>Thu, 10 Oct 2019 19:07:03 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/linux-software/</guid>
      <description>&lt;p&gt;通常可以使用系统的包管理程序安装
也可以使用源码安装&lt;/p&gt;
&lt;h2 id=&#34;便捷安装&#34;&gt;便捷安装&lt;/h2&gt;
&lt;p&gt;使用PMS（package management system）包管理系统&lt;/p&gt;
&lt;h3 id=&#34;dpkg-基于debian的包管理系统命令&#34;&gt;dpkg 基于Debian的包管理系统命令&lt;/h3&gt;
&lt;p&gt;aptitude 最常用的基于dpkg命令行的包管理系统实例&lt;/p&gt;
&lt;p&gt;包括ubuntu、armbian等debian系的系统&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ apt       &lt;span class=&#34;c1&#34;&gt;#aptitude命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            update          &lt;span class=&#34;c1&#34;&gt;#更新apt&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            upgrade         &lt;span class=&#34;c1&#34;&gt;#更新所有软件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            show            &lt;span class=&#34;c1&#34;&gt;#查看程序包信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            search          &lt;span class=&#34;c1&#34;&gt;#通过关键词搜索软件包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            install         &lt;span class=&#34;c1&#34;&gt;#安装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            safe-upgrade    &lt;span class=&#34;c1&#34;&gt;#安全更新&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            remove          &lt;span class=&#34;c1&#34;&gt;#删除软件包 保留数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            purge           &lt;span class=&#34;c1&#34;&gt;#彻底删除软件包和数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;文件/etc/apt/source.list是软件仓库&lt;/p&gt;
&lt;p&gt;通常不需要更改，默认的软件仓库基本可以满足需求&lt;/p&gt;
&lt;p&gt;有需要时在其他软件仓库官网上复制仓库信息并加入仓库配置文件中&lt;/p&gt;
&lt;h3 id=&#34;rpm-基于redhat的包管理系统&#34;&gt;rpm 基于RedHat的包管理系统&lt;/h3&gt;
&lt;p&gt;yum  最常用的基于rpm命令行的包管理系统&lt;/p&gt;
&lt;p&gt;包括centOS、fedora等redhat系的系统&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ yum       &lt;span class=&#34;c1&#34;&gt;#yum命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            install         &lt;span class=&#34;c1&#34;&gt;#安装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            list installed  &lt;span class=&#34;c1&#34;&gt;#查看已安装&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            provides        &lt;span class=&#34;c1&#34;&gt;#查看文件对应的软件包&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            remove          &lt;span class=&#34;c1&#34;&gt;#删除软件包 保留数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            erase           &lt;span class=&#34;c1&#34;&gt;#删除软件包和数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            repolist        &lt;span class=&#34;c1&#34;&gt;#可以显示软件来源仓库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以手动下载rpm文件并用yum的localinstall命令本地安装&lt;/p&gt;
&lt;p&gt;有时存在软件包库依赖关系损坏的情况
一般先clean all后updae
或者用deplist显示库依赖后手动修改
最终也可以update - -skip-broken&lt;/p&gt;
&lt;h2 id=&#34;源码安装&#34;&gt;源码安装&lt;/h2&gt;
&lt;p&gt;不用包管理系统 从源码安装软件&lt;/p&gt;
&lt;p&gt;下载tar文件（一般从官网下载 .tar.gz文件）&lt;/p&gt;
&lt;p&gt;用tar -zxvf解压后 &lt;strong&gt;阅读README文件&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般根据README文件的指示 make或者make install命令可以将软件安装&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Linux基础操作记录</title>
      <link>https://yangleisx.github.io/post/linux-basic/</link>
      <pubDate>Tue, 08 Oct 2019 19:07:53 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/linux-basic/</guid>
      <description>&lt;p&gt;Linux基础操作&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;学会查看帮助文档！&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;使用man或help或info查看具体使用方法&lt;/p&gt;
&lt;h2 id=&#34;文件目录操作&#34;&gt;文件/目录操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;# 显示当前目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ls            &lt;span class=&#34;c1&#34;&gt;# 查看当前目录内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# 常用方法为加-alF或者-as或者-li&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -i &lt;span class=&#34;c1&#34;&gt;# 显示文件编号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -d &lt;span class=&#34;c1&#34;&gt;# 显示dir本身&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                --color &lt;span class=&#34;c1&#34;&gt;# 颜色显示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ touch         &lt;span class=&#34;c1&#34;&gt;# 创建空文件,也能刷新修改时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cp            &lt;span class=&#34;c1&#34;&gt;# 复制文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -i &lt;span class=&#34;c1&#34;&gt;# 询问是否覆盖&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -r &lt;span class=&#34;c1&#34;&gt;# 可递归复制目录所有内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ln            &lt;span class=&#34;c1&#34;&gt;# 创建硬链接&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -s &lt;span class=&#34;c1&#34;&gt;# 创建符号链接&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ readlink      -f &lt;span class=&#34;c1&#34;&gt;# 查看链接文件的最末端&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mv            &lt;span class=&#34;c1&#34;&gt;# 移动或者重命名(重命名后修改时间和文件编号都不变)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# -i询问是否覆盖&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ rm            &lt;span class=&#34;c1&#34;&gt;# 删除文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -i &lt;span class=&#34;c1&#34;&gt;# 询问是否确认删除&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -r &lt;span class=&#34;c1&#34;&gt;# 向下递归所有子目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -rf &lt;span class=&#34;c1&#34;&gt;# 强制删除整个目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mkdir         &lt;span class=&#34;c1&#34;&gt;# 创建目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ rmdir         &lt;span class=&#34;c1&#34;&gt;# 删除空目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tree          &lt;span class=&#34;c1&#34;&gt;# 查看目录信息(一个工具 需要apt安装)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ file          &lt;span class=&#34;c1&#34;&gt;# 查看文件类型&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cat           &lt;span class=&#34;c1&#34;&gt;# 查看文件内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -n &lt;span class=&#34;c1&#34;&gt;# 内容全部加行号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -b &lt;span class=&#34;c1&#34;&gt;# 有字的内容加行号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ more          &lt;span class=&#34;c1&#34;&gt;# 分页显示文本内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ less          &lt;span class=&#34;c1&#34;&gt;# 分页显示文本内容（需要apt安装）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tail          &lt;span class=&#34;c1&#34;&gt;# 查看文件末尾内容&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -n &lt;span class=&#34;c1&#34;&gt;# 指明行数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -f &lt;span class=&#34;c1&#34;&gt;# 自动刷新(实时监测log文件末尾)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ head          &lt;span class=&#34;c1&#34;&gt;# 查看文件头&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cmp           &lt;span class=&#34;c1&#34;&gt;# 比较文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ diff          &lt;span class=&#34;c1&#34;&gt;# 逐行显示文件区别&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# 分别表示为a添加c改变d删去&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gzip          &lt;span class=&#34;c1&#34;&gt;# 压缩文件.gz&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ zcat          &lt;span class=&#34;c1&#34;&gt;# 查看压缩文件.gz&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ gunziq        &lt;span class=&#34;c1&#34;&gt;# 解压文件.gz&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tar           &lt;span class=&#34;c1&#34;&gt;# 归档命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -cvf &lt;span class=&#34;c1&#34;&gt;# 创建 显示 输出文件 .tar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -tf &lt;span class=&#34;c1&#34;&gt;# 列出内容但是不提取&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -xvf &lt;span class=&#34;c1&#34;&gt;# 提取全部文件 显示 .tar&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -zxvf &lt;span class=&#34;c1&#34;&gt;# 解压.tgz的文件[gzip+tar]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ grep          &lt;span class=&#34;c1&#34;&gt;# 搜索数据&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -v &lt;span class=&#34;c1&#34;&gt;# 反向搜索（不含某字段的行）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -n &lt;span class=&#34;c1&#34;&gt;# 显示行号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -c &lt;span class=&#34;c1&#34;&gt;# 显示匹配到的数量&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -e &lt;span class=&#34;c1&#34;&gt;# 添加多个搜索的字段&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# 匹配模式默认支持正则表达式&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;进程操作&#34;&gt;进程操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ ps            &lt;span class=&#34;c1&#34;&gt;# 监测系统进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -ef &lt;span class=&#34;c1&#34;&gt;# 所有进程的详细信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -l  &lt;span class=&#34;c1&#34;&gt;# 扩展信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -f  &lt;span class=&#34;c1&#34;&gt;# 显示较详细信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                --forest &lt;span class=&#34;c1&#34;&gt;# 用tree的方法表明父子进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ top           &lt;span class=&#34;c1&#34;&gt;# 实时监测系统进程&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ basename      &lt;span class=&#34;c1&#34;&gt;# 剥离路径名 显示文件名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ killall       &lt;span class=&#34;c1&#34;&gt;# 中断进程 与kill类似&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;# 向进程发出信号 默认为TERM&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# 后加进程代码和信号参数&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -s &lt;span class=&#34;c1&#34;&gt;# 强制发送信号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;######################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# kill的信号参数：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# KILL      无条件终止【SIGKILL信号】&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# HUP       挂起【SIGHUP信号】&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# INT       中断【SIGINT信号】&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# TERM      尽可能终止【SIGTERM信号】&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;######################################&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;系统操作&#34;&gt;系统操作&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mount         &lt;span class=&#34;c1&#34;&gt;# 挂载媒体命令&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# 默认输出已挂载设备列表&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -t &lt;span class=&#34;c1&#34;&gt;# 手动挂载时指定type 包括vfat，ntfs类型等&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ umount        &lt;span class=&#34;c1&#34;&gt;# 卸载设备&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ df            &lt;span class=&#34;c1&#34;&gt;#查看磁盘空间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -h &lt;span class=&#34;c1&#34;&gt;# 用M和G表示磁盘空间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ du            &lt;span class=&#34;c1&#34;&gt;# 显示目录下所有文件占用的空间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -c &lt;span class=&#34;c1&#34;&gt;# 显示总大小&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                -h &lt;span class=&#34;c1&#34;&gt;# 用M和G表示磁盘空间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ date          &lt;span class=&#34;c1&#34;&gt;#显示时间&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                +%y%m%d &lt;span class=&#34;c1&#34;&gt;# 按照两位数年月日显示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                +%H%M%S &lt;span class=&#34;c1&#34;&gt;# 按照时分秒显示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# 其他格式参见man文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ who           &lt;span class=&#34;c1&#34;&gt;# 显示登录信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ uptime        &lt;span class=&#34;c1&#34;&gt;# 显示系统登陆时间信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ tty           &lt;span class=&#34;c1&#34;&gt;# 显示登陆所用终端文件路径&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ cal           &lt;span class=&#34;c1&#34;&gt;# 显示日历&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ write         &lt;span class=&#34;c1&#34;&gt;# 用户间单方面传递信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# 可以重定向文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ talk          &lt;span class=&#34;c1&#34;&gt;# 用户间建立交互式信息传递&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ wall          &lt;span class=&#34;c1&#34;&gt;# 对所有用户传递信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ mesg          &lt;span class=&#34;c1&#34;&gt;# 通信设置（是否接受他人信息等）&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;$ telnet        &lt;span class=&#34;c1&#34;&gt;# 链接网络上的远程主机&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;c1&#34;&gt;# 后接URL或者IP地址和端口&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Make简单使用</title>
      <link>https://yangleisx.github.io/post/makefile-base/</link>
      <pubDate>Thu, 03 Oct 2019 21:56:07 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/makefile-base/</guid>
      <description>&lt;p&gt;简单了解make的用法。&lt;/p&gt;
&lt;h3 id=&#34;格式&#34;&gt;格式&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;target(生成文件名)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;source&lt;/span&gt;(依赖文件名)
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    command&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;指令&lt;span class=&#34;o&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;步骤&#34;&gt;步骤&lt;/h3&gt;
&lt;p&gt;步骤一：所有的目标文件和静态库文件连接成可执行文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;main &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;1.&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;2.&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; ... &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;1.&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;lib&lt;/span&gt;2.&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    g++ file1.o file2.o...lib1.a lib2.a... -o main
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤二：指定的目标文件打包为静态库文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;lib.a &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;libfile&lt;/span&gt;1.&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;libfile&lt;/span&gt;2.&lt;span class=&#34;n&#34;&gt;o&lt;/span&gt; ...
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ar libfile1.o libfile2.o... -r lib.a
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤三：所有的源码编译为目标文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;file.o &lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt;.&lt;span class=&#34;n&#34;&gt;cpp&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    g++ -c file.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;步骤四：指定clean内容&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-makefile&#34; data-lang=&#34;makefile&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;clean&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    rm main file1.o ... libfile1.a ...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;make指令：依据makefile的要求进行编译&lt;/p&gt;
&lt;p&gt;make clean指令：依据makefile的clean指令删除指定的文件&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;[注意]&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;不需要指定头文件(可写可不写)&lt;/p&gt;
&lt;p&gt;不过建议加在对应的依赖文件处 如main.o : main.cpp lib1.hpp&lt;/p&gt;
&lt;p&gt;编译预处理时#include “file.hpp”的含义为在本文件夹中寻找头文件并链接到该位置&lt;/p&gt;
&lt;p&gt;编译预处理时#include &amp;lt; iostream &amp;gt; 的含义为在C++标准库中寻找头文件并链接到该位置&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>C&#43;&#43;库的编译</title>
      <link>https://yangleisx.github.io/post/cpp-build/</link>
      <pubDate>Mon, 30 Sep 2019 18:51:09 +0800</pubDate>
      <guid>https://yangleisx.github.io/post/cpp-build/</guid>
      <description>&lt;p&gt;简单介绍C/C+静态库和动态库的编译方法。&lt;/p&gt;
&lt;h2 id=&#34;静态库&#34;&gt;静态库&lt;/h2&gt;
&lt;p&gt;静态库的命名格式：libname.a&lt;/p&gt;
&lt;p&gt;即以lib为前缀，.a作为后缀&lt;/p&gt;
&lt;h3 id=&#34;生成&#34;&gt;生成&lt;/h3&gt;
&lt;p&gt;打包为库的工具为ar&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ar -crv libtest.a test.o
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#或者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ar -cr libtest.a test.o
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;使用&#34;&gt;使用&lt;/h3&gt;
&lt;p&gt;g++编译时需要指明路径和名字&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ main.cpp -L . -l &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -o main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#静态库名不需要加前缀和后缀&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;动态库&#34;&gt;动态库&lt;/h2&gt;
&lt;p&gt;linux的动态库的命名格式：libname.so&lt;/p&gt;
&lt;p&gt;即以lib为前缀，.so为后缀&lt;/p&gt;
&lt;h3 id=&#34;动态库生成&#34;&gt;动态库生成&lt;/h3&gt;
&lt;p&gt;使用编译器创建动态库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ -f PIC -c test.cpp#为了生成多程序共享的动态库
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ -shared -o libtest.so test.o#创建链接
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#或者合并为一句&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ -f PIC -shared -o libtest.so test.cpp
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;动态库使用&#34;&gt;动态库使用&lt;/h3&gt;
&lt;p&gt;具体使用方法与静态库一样&lt;/p&gt;
&lt;p&gt;但是需要注意 必须显式指明动态连接库的位置&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#查看库的位置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;pwd&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#编辑ld配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo vim /etc/ld.so.conf#在最后一行加入库目录
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;sudo ldconfig#重建库的位置文件
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#使用动态连接库&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;g++ main.cpp -L . -l &lt;span class=&#34;nb&#34;&gt;test&lt;/span&gt; -o main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;./main
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;#如果没有指明库的路径 编译时没有问题但是运行可执行文件会报错&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
